---
benchmark_type: lxd
categories:
  -
    name: Access, Authentication and Authorization
    sub_category:
      name: 5.4 User Accounts and Environment
      audit_tests:
        -
          name: '5.4.1.1 Ensure password expiration is 365 days or less (Automated)'
          description: The PASS_MAX_DAYS parameter in /etc/login.defs allows an administrator to force passwords to expire once they reach a defined age.
                        It is recommended that the PASS_MAX_DAYS parameter be set to less than or equal to 365 days.
          audit:
            - 'grep PASS_MAX_DAYS /etc/login.defs 2> /dev/null|grep -v ''#'' | awk -F "PASS_MAX_DAYS" ''{print $2}'' |awk ''FNR <= 1'''
            - 'grep -E ''^[^:]+:[^!*]'' /etc/shadow 2> /dev/null| cut -d: -f1,5 | awk -F ":" ''{print $2}'' |awk ''FNR <= 1'''
          remedeation: 'Set the PASS_MAX_DAYS parameter to conform to site policy in /etc/login.defs : PASS_MAX_DAYS 365
                        Modify user parameters for all users with a password set to match:
                        # chage --maxdays 365 <user>'
          check_type: multi_param
          additional_info: 'You can also check this setting in /etc/shadow directly. The 5th field should be 365 or less for all users with a password.
                            Note: A value of -1 will disable password expiration. Additionally the password expiration must be
                            greater than the minimum days between password changes or users will be unable to change their password.'
          eval_expr: "$0 <= 365; && $1 <= 365"
        -
          name: '5.4.1.2 Ensure minimum days between password changes is configured (Automated)'
          description: The PASS_MIN_DAYS parameter in /etc/login.defs allows an administrator to prevent users from changing
                        their password until a minimum number of days have passed since the last time the user changed their password.
                        It is recommended that PASS_MIN_DAYS parameter be set to 1 or more days.
          audit:
            - 'grep PASS_MIN_DAYS /etc/login.defs 2> /dev/null|grep -v ''#'' | awk -F "PASS_MIN_DAYS" ''{print $2}'' |awk ''FNR <= 1'''
            - 'grep -E ''^[^:]+:[^!*]'' /etc/shadow 2> /dev/null| cut -d: -f1,4 | awk -F ":" ''{print $2}'' |awk ''FNR <= 1'''
          remedeation: 'Set the PASS_MIN_DAYS parameter to 1 in /etc/login.defs : PASS_MIN_DAYS 1
                        Modify user parameters for all users with a password set to match: # chage --mindays 1 <user>'
          check_type: multi_param
          additional_info: 'You can also check this setting in /etc/shadow directly. The 4th field should be 1 or more for all users with a password.'
          eval_expr: "$0 >= 1 && $1 >= 1"
        -
          name: '5.4.1.3 Ensure password expiration warning days is 7 or more (Automated)'
          description: The PASS_WARN_AGE parameter in /etc/login.defs allows an administrator to notify users
                      that their password will expire in a defined number of days. It is recommended that the
                      PASS_WARN_AGE parameter be set to 7 or more days.
          audit:
            - 'grep PASS_WARN_AGE /etc/login.defs 2> /dev/null|grep -v ''#'' | awk -F "PASS_WARN_AGE" ''{print $2}'' |awk ''FNR <= 1'''
            - 'grep -E ''^[^:]+:[^!*]'' /etc/shadow 2> /dev/null| cut -d: -f1,6 | awk -F ":" ''{print $2}'' |awk ''FNR <= 1'''
          remedeation: 'Set the PASS_WARN_AGE parameter to 7 in /etc/login.defs : PASS_WARN_AGE 7
                        Modify user parameters for all users with a password set to match:
                        # chage --warndays 7 <user>'
          check_type: multi_param
          additional_info: 'You can also check this setting in /etc/shadow directly. The 6th field should be 7 or more for all users with a password.'
          eval_expr: "$0 >= 7 && $1 >= 7"
        -
          name: '5.4.1.4 Ensure inactive password lock is 30 days or less (Automated)'
          description: User accounts that have been inactive for over a given period of time can be automatically disabled.
                        It is recommended that accounts that are inactive for 30 days after password expiration be disabled.
          audit:
            - 'useradd -D 2> /dev/null| grep INACTIVE | awk -F "INACTIVE=" ''{print $2}'' |awk ''FNR <= 1'''
            - 'grep -E ''^[^:]+:[^]'' /etc/shadow 2> /dev/null| cut -d: -f1,7 | awk -F ":" ''{print $2}'' |awk ''FNR <= 1'' |sed ''/^$/d'''
          remedeation: 'Run the following command to set the default password inactivity period to 30 days:
                        # useradd -D -f 30
                        Modify user parameters for all users with a password set to match:
                        # chage --inactive 30 <user>'
          check_type: multi_param
          additional_info: 'You can also check this setting in /etc/shadow directly. The 7th field should be 30 or less for all users with a password.
                            Note: A value of -1 would disable this setting.'
          eval_expr: "$0 <= 30 && $1 == 30"
        -
          name: '5.4.1.5 Ensure all users last password change date is in the past (Automated)'
          description: All users should have a password change date in the past.
          audit:
            - 'for usr in $(cut -d: -f1 /etc/shadow); do [[ $(chage --list $usr | grep ''^Last password change'' | cut -d: -f2) > $(date) ]] && echo "$usr :$(chage -- list $usr | grep ''^Last password change'' | cut -d: -f2)"; done'
          remedeation: 'Investigate any users with a password change date in the future and correct them. Locking the account, expiring the password, or resetting the password manually may be appropriate.'
          check_type: multi_param
          eval_expr: "'$0' == ''"
        -
          name: '5.4.2 Ensure system accounts are secured (Automated)'
          description: There are a number of accounts provided with most distributions that are used to manage applications and are not intended to provide an interactive shell.
          audit:
            - 'awk -F: ''($1!="root" && $1!="sync" && $1!="shutdown" && $1!="halt" && $1!~/^\+/ && $3<''"$(awk ''/^\s*UID_MIN/{print $2}'' /etc/login.defs)"'' && $7!="''"$(which nologin)"''" && $7!="/bin/false") {print}'' /etc/passwd'
            - 'awk -F: ''($1!="root" && $1!~/^\+/ && $3<''"$(awk ''/^\s*UID_MIN/{print $2}'' /etc/login.defs)"'') {print $1}'' /etc/passwd | xargs -I ''{}'' passwd -S ''{}'' | awk ''($2!="L" && $2!="LK") {print $1}'''
          remedeation: 'Run the commands appropriate for your distribution:
                        Set the shell for any accounts returned by the audit to nologin:
                        # usermod -s $(which nologin) <user>
                        Lock any non root accounts returned by the audit:
                        # usermod -L <user>
                        The following command will set all system accounts to a non login shell:
                         awk -F: ''($1!="root" && $1!="sync" && $1!="shutdown" && $1!="halt" && $1!~/^\+/ && $3<''"$(awk ''/^\s*UID_MIN/{print $2}'' /etc/login.defs)"'' &&  $7!="''"$(which nologin)"''" && $7!="/bin/false") {print $1}'' /etc/passwd | while read -r user; do usermod -s "$(which nologin)" "$user"; done
                        The following command will automatically lock not root system accounts:
                        awk -F: ''($1!="root" && $1!~/^\+/ && $3<''"$(awk ''/^\s*UID_MIN/{print $2}'' /etc/login.defs)"'') {print $1}'' /etc/passwd | xargs -I ''{}'' passwd -S ''{}'' | awk ''($2!="L" && $2!="LK") {print $1}'' | while read -r user; do usermod -L "$user"; done'
          check_type: multi_param
          eval_expr: "'$0' == '' && '$1' == ''"
          additional_info: 'The root, sync, shutdown, and halt users are exempted from requiring a non-login shell.'
        -
          name: '5.4.3 Ensure default group for the root account is GID 0 (Automated)'
          description: The usermod command can be used to specify which group the root user belongs to. This affects permissions of files that are created by the root user.
          audit:
            - 'grep "^root:" /etc/passwd 2> /dev/null| cut -f4 -d:'
          remedeation: 'Run the following command to set the root user default group to GID 0 :
                        # usermod -g 0 root'
          check_type: multi_param
          eval_expr: "'$0' == '0'"
        -
          name: '5.4.4 Ensure default user umask is 027 or more restrictive (Automated)'
          description: The default umask determines the permissions of files created by users.
                        The user creating the file has the discretion of making their files and directories readable
                        by others via the chmod command. Users who wish to allow their files and directories to be readable by
                        others by default may choose a different default umask by inserting the umask command into the standard shell
                        configuration files ( .profile , .bashrc , etc.) in their home directories.
          audit:
            - 'grep "umask"  /etc/bash.bashrc 2> /dev/null |awk -F "umask" ''{print $2}'' |awk ''FNR <= 1'''
            - 'grep "umask" /etc/profile /etc/profile.d/*.sh 2> /dev/null |awk -F "umask" ''{print $2}'' |awk ''FNR <= 1'''
          remedeation: 'Edit the /etc/bash.bashrc, /etc/profile and /etc/profile.d/*.sh files (and the appropriate files for any other shell supported on your system) and add or edit any umask parameters as follows:
                        umask 027'
          check_type: multi_param
          eval_expr: "$0 >= 27 && $1 >= 27"
          additional_info: 'The audit and remediation in this recommendation apply to bash and shell. If other shells are supported on the system,
                            it is recommended that their configuration files also are checked.
                            Other methods of setting a default user umask exist however the shell configuration files
                            are the last run and will override other settings if they exist therefor our recommendation is to configure
                            in the shell configuration files. If other methods are in use in your environment they should be audited and the
                            shell configs should be verified to not override.'

