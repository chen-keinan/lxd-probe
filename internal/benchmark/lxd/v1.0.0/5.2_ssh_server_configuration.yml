---
benchmark_type: lxd
categories:
  -
    name: Access, Authentication and Authorization
    sub_category:
      name: 5.2 SSH Server Configuration
      audit_tests:
        -
          name: '5.2.1 Ensure permissions on /etc/ssh/sshd_config are configured (Automated)'
          description: The /etc/ssh/sshd_config file contains configuration specifications for sshd. The command below sets the owner and group of the file to root.
          audit:
            - 'stat /etc/ssh/sshd_config 2> /dev/null |grep Access |awk -F "Access:" ''{print $2}'' |awk ''FNR <= 1'''
          remedeation: 'Run the following commands to set ownership and permissions on /etc/ssh/sshd_config:
                         # chown root:root /etc/ssh/sshd_config
                         # chmod og-rwx /etc/ssh/sshd_config'
          check_type: multi_param
          additional_info: 'Additional methods of enabling a service exist. Consult your distribution documentation for appropriate methods.'
          eval_expr: "'$0' == '(0600/-rw-------)  Uid: (    0/    root)   Gid: (    0/    root)';"
        -
          name: '5.2.2 Ensure permissions on SSH private host key files are configured (Automated)'
          description: An SSH private key is one of two files used in SSH public key authentication.
                      In this authentication method, The possession of the private key is proof of identity.
                      Only a private key that corresponds to a public key will be able to authenticate successfully.
                      The private keys need to be stored and handled carefully, and no copies of the private key should be distributed.
          audit:
            - 'find /etc/ssh -xdev -type f -name ''ssh_host_*_key'' -exec stat {} \; | grep "Access: (" |awk -F "Access:" ''{print $2}'''
          remedeation: 'Run the following commands to set ownership and permissions on the private SSH host key files:
                        # find /etc/ssh -xdev -type f -name ''ssh_host_*_key'' -exec chown root:root {} \;
                        # find /etc/ssh -xdev -type f -name ''ssh_host_*_key'' -exec chmod 0600 {} \;'
          check_type: multi_param
          eval_expr: "'$0' == '(0600/-rw-------)  Uid: (    0/    root)   Gid: (    0/    root)';"
        -
          name: '5.2.3 Ensure permissions on SSH public host key files are configured (Automated)'
          description: An SSH public key is one of two files used in SSH public key authentication.
                      In this authentication method, a public key is a key that can be used for verifying digital
                      signatures generated using a corresponding private key. Only a public key that corresponds to a private
                      key will be able to authenticate successfully.
          audit:
            - 'find /etc/ssh -xdev -type f -name ''ssh_host_*_key.pub'' -exec stat {} \; | grep "Access: (" |awk -F "Access:" ''{print $2}'''
          remedeation: 'Run the following commands to set permissions and ownership on the SSH host public key files:
                        # find /etc/ssh -xdev -type f -name ''ssh_host_*_key.pub'' -exec chmod go-wx {} \;
                        # find /etc/ssh -xdev -type f -name ''ssh_host_*_key.pub'' -exec chown root:root {} \;'
          check_type: multi_param
          eval_expr: "'$0' == '(0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)';"
        -
          name: '5.2.4 Ensure SSH Protocol is not set to 1 (Automated)'
          description: Older versions of SSH support two different and incompatible protocols
                        SSH1 and SSH2. SSH1 was the original protocol and was subject to security issues.
                        SSH2 is more advanced and secure.
          audit:
            - 'sshd -T 2> /dev/null | grep -Ei ''^\s*protocol\s+(1|1\s*,\s*2|2\s*,\s*1)\s*'''
          remedeation: 'Edit the /etc/ssh/sshd_config file to set the parameter as follows: Protocol 2'
          check_type: multi_param
          eval_expr: "'$0' == '';"
          additional_info: 'This command not longer exists in newer versions of SSH.
                            This check is still being included for systems that may be running an older version of SSH. As of
                            openSSH version 7.4 this parameter will not cause an issue when included.'
        -
          name: '5.2.5 Ensure SSH LogLevel is appropriate (Automated)'
          description: INFO level is the basic level that only records login activity of SSH users. In many situations,
            such as Incident Response, it is important to determine when a particular user was active on a system.
            The logout record can eliminate those users who disconnected, which helps narrow the field.
            VERBOSE level specifies that login and logout activity as well as the key fingerprint for any SSH key used for
            login will be logged. This information is important for SSH key management, especially in legacy environments.
          audit:
            - 'sshd -T 2> /dev/null | grep loglevel'
          remedeation: 'Edit the /etc/ssh/sshd_config file to set the parameter as follows: LogLevel VERBOSE
                        OR
                        LogLevel INFO'
          check_type: multi_param
          eval_expr: "'$0' == 'loglevel VERBOSE'; || '$0' == 'loglevel INFO';"
          default_value: LogLevel INFO
          references:
            - https://www.ssh.com/ssh/sshd_config/
        -
          name: '5.2.6 Ensure SSH X11 forwarding is disabled (Automated)'
          description: The X11Forwarding parameter provides the ability to tunnel X11 traffic through the connection to enable remote graphic connections.
          audit:
            - 'sshd -T 2> /dev/null| grep x11forwarding'
          remedeation: 'Edit the /etc/ssh/sshd_config file to set the parameter as follows:
                        X11Forwarding no'
          check_type: multi_param
          eval_expr: "'$0' == 'x11forwarding no';"
        -
          name: '5.2.7 Ensure SSH MaxAuthTries is set to 4 or less (Automated)'
          description: The MaxAuthTries parameter specifies the maximum number of authentication attempts permitted per connection.
                      When the login failure count reaches half the number, error messages will be written to the syslog file detailing the login failure.
          audit:
            - 'sshd -T 2> /dev/null| grep maxauthtries'
          remedeation: 'Edit the /etc/ssh/sshd_config file to set the parameter as follows:
                        MaxAuthTries 4'
          check_type: multi_param
          eval_expr: "'$0' == 'maxAuthTries 4';"
          default_value: MaxAuthTries 6
        -
          name: '5.2.8 Ensure SSH IgnoreRhosts is enabled (Automated)'
          description: The IgnoreRhosts parameter specifies that .rhosts and .shosts
                        files will not be used in RhostsRSAAuthentication or HostbasedAuthentication.
          audit:
            - 'sshd -T 2> /dev/null| grep ignorerhosts'
          remedeation: 'Edit the /etc/ssh/sshd_config file to set the parameter as follows:
                        IgnoreRhosts yes'
          check_type: multi_param
          eval_expr: "'$0' == 'ignoreRhosts yes';"
          default_value: IgnoreRhosts yes
        -
          name: '5.2.9 Ensure SSH HostbasedAuthentication is disabled (Automated)'
          description: The HostbasedAuthentication parameter specifies if authentication is allowed through
                        trusted hosts via the user of .rhosts, or /etc/hosts.equiv, along with successful public key
                        client host authentication. This option only applies to SSH Protocol Version 2.
          audit:
            - 'sshd -T 2> /dev/null| grep hostbasedauthentication'
          remedeation: 'Edit the /etc/ssh/sshd_config file to set the parameter as follows:
                        hostbasedauthentication no'
          check_type: multi_param
          eval_expr: "'$0' == 'hostbasedauthentication no';"
          default_value: hostbasedAuthentication no
        -
          name: '5.2.10 Ensure SSH root login is disabled (Automated)'
          description: The PermitRootLogin parameter specifies if the root user can log in using ssh. The default is no.
          audit:
            - 'sshd -T 2> /dev/null| grep permitrootlogin'
          remedeation: 'Edit the /etc/ssh/sshd_config file to set the parameter as follows::
                        permitrootlogin no'
          check_type: multi_param
          eval_expr: "'$0' == 'permitrootlogin no';"
          default_value: PermitRootLogin without-password
        -
          name: '5.2.11 Ensure SSH PermitEmptyPasswords is disabled (Automated)'
          description: The PermitEmptyPasswords parameter specifies if the SSH server allows login to accounts with empty password strings.
          audit:
            - 'sshd -T 2> /dev/null| grep permitemptypasswords'
          remedeation: 'Edit the /etc/ssh/sshd_config file to set the parameter as follows::
                        permitemptypasswords no'
          check_type: multi_param
          eval_expr: "'$0' == 'permitemptypasswords no';"
          default_value: PermitEmptyPasswords no
        -
          name: '5.2.12 Ensure SSH PermitUserEnvironment is disabled (Automated)'
          description: The PermitUserEnvironment option allows users to present environment options to the ssh daemon.
          audit:
            - 'sshd -T 2> /dev/null| grep permituserenvironment'
          remedeation: 'Edit the /etc/ssh/sshd_config file to set the parameter as follows::
                        permituserenvironment no'
          check_type: multi_param
          eval_expr: "'$0' == 'permituserenvironment no';"
          default_value: permituserenvironment no
        -
          name: '5.2.13 Ensure only strong Ciphers are used (Automated)'
          description: This variable limits the ciphers that SSH can use during communication.
          audit:
            - 'sshd -T 2> /dev/null| grep ciphers |awk -F "ciphers" ''{print $2}'' |awk ''FNR <= 1'' | sed -e $''s/,/\\\n/g'''
          remedeation: 'Edit the /etc/ssh/sshd_config file add/modify the Ciphers line to contain a comma separated list of the site approved ciphers
                        Example:
                         Ciphers chacha20-poly1305@openssh.com,
                         aes256-gcm@openssh.com,
                         aes128-gcm@openssh.com,
                         aes256-ctr,
                         aes192-ctr,
                         aes128-ctr'
          check_type: multi_param
          eval_expr: "'$0' IN ('3des-cbc','aes128-cbc','aes192-cbc','aes256-cbc','arcfour','arcfour128','arcfour256','blowfish-cbc','cast128-cbc','rijndael-cbc@lysator.liu.se');"
          default_value: Ciphers chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128- gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256- cbc,blowfish-cbc,cast128-cbc,3des-cbc
          references:
            - https://nvd.nist.gov/vuln/detail/CVE-2016-2183 2. https://nvd.nist.gov/vuln/detail/CVE-2015-2808 3. https://www.kb.cert.org/vuls/id/565052
            - https://www.openssh.com/txt/cbc.adv
            - https://nvd.nist.gov/vuln/detail/CVE-2008-5161 6. https://nvd.nist.gov/vuln/detail/CVE-2013-4548 7. https://www.kb.cert.org/vuls/id/565052
            - https://www.openssh.com/txt/cbc.adv
            - SSHD_CONFIG(5)
          additional_info: 'Some organizations may have stricter requirements for approved ciphers. Ensure that ciphers used are in compliance with site policy.
                            The only "strong" ciphers currently FIPS 140-2 compliant are: aes256-ctr,aes192- ctr,aes128-ctr
                            CVE-2013-4548 referenced above applies to OpenSSH versions 6.2 and 6.3. If running these versions of Open SSH, Please upgrade to version 6.4 or later to fix the vulnerability, or disable AES-GCM in the server configuration.
                            The Following are the supported ciphers in openSSH:
                            3des-cbc
                            aes128-cbc
                            aes192-cbc
                            aes256-cbc
                            aes128-ctr
                            aes192-ctr
                            aes256-ctr
                            aes128-gcm@openssh.com
                            aes256-gcm@openssh.com
                            arcfour
                            arcfour128
                            arcfour256
                            blowfish-cbc
                            cast128-cbc
                            rijndael-cbc@lysator.liu.se
                            chacha20-poly1305@openssh.com'
        -
          name: '5.2.14 Ensure only strong MAC algorithms are used (Automated)'
          description: This variable limits the types of MAC algorithms that SSH can use during communication.
          audit:
            - 'sshd -T | grep -i "MACs" |awk -F "macs" ''{print $2}'' |awk ''FNR <= 1'' | sed -e $''s/,/\\\n/g'''
          remedeation: 'Edit the /etc/ssh/sshd_config file and add/modify the MACs line to contain a comma separated list of the site approved MACs
                          Example:
                          MACs hmac-sha2-512-etm@openssh.com,
                          hmac-sha2-256-etm@openssh.com,
                          hmac-sha2-512,
                          hmac-sha2-256'
          check_type: multi_param
          eval_expr: "!('$0' IN ('hmac-md5','hmac-md5-96','hmac-ripemd160','hmac-sha1','hmac-sha1-96','umac-64@openssh.com','umac-128@openssh.com','hmac-md5-etm@openssh.com','hmac-md5-96-etm@openssh.com','hmac-ripemd160-etm@openssh.com','hmac-sha1-etm@openssh.com','hmac-sha1-96-etm@openssh.com','umac-64-etm@openssh.com','umac-128-etm@openssh.com');)"
          default_value: MACs umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256- etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1- etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2- 256,hmac-sha2-512,hmac-sha1,hmac-sha1-etm@openssh.com
          references:
            - More information on SSH downgrade attacks can be found here http://www.mitls.org/pages/attacks/SLOTH
            - SSHD_CONFIG(5)
          additional_info: 'Some organizations may have stricter requirements for approved MACs. Ensure that MACs used are in compliance with site policy.
                            The only "strong" MACs currently FIPS 140-2 approved are hmac-sha2-256 and hmac- sha2-512
                            The Supported MACs are:
                            hmac-md5
                            hmac-md5-96
                            hmac-ripemd160
                            hmac-sha1
                            hmac-sha1-96
                            hmac-sha2-256
                            hmac-sha2-512
                            umac-64@openssh.com
                            umac-128@openssh.com
                            hmac-md5-etm@openssh.com
                            hmac-md5-96-etm@openssh.com
                            hmac-ripemd160-etm@openssh.com
                            hmac-sha1-etm@openssh.com
                            hmac-sha1-96-etm@openssh.com
                            hmac-sha2-256-etm@openssh.com
                            hmac-sha2-512-etm@openssh.com
                            umac-64-etm@openssh.com
                            umac-128-etm@openssh.com'
        -
          name: '5.2.15 Ensure only strong Key Exchange algorithms are used (Automated)'
          description: Key exchange is any method in cryptography by which cryptographic keys are exchanged between two parties, allowing use of
                      a cryptographic algorithm. If the sender and receiver wish to exchange encrypted messages,
                      each must be equipped to encrypt messages to be sent and decrypt messages received
          audit:
            - 'sshd -T | grep -i kexalgorithms |awk -F "kexalgorithms" ''{print $2}'' |awk ''FNR <= 1'' | sed -e $''s/,/\\\n/g'''
          remedeation: 'Edit the /etc/ssh/sshd_config file add/modify the KexAlgorithms line to contain a comma separated list of the site approved key exchange algorithms
                        Example:
                          KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,
                          diffie-hellman-group14-sha256,diffie-hellman-group16-sha512,
                          diffie-hellman-group18- sha512,
                          ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,
                          diffie- hellman-group-exchange-sha256'
          check_type: multi_param
          eval_expr: "!('$0' IN ('diffie-hellman-group1-sha1','diffie-hellman-group14-sha1','diffie-hellman-group-exchange-sha1');)"
          default_value: KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2- nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange- sha256,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
          additional_info: 'Kex algorithms have a higher preference the earlier they appear in the list
                            Some organizations may have stricter requirements for approved Key exchange algorithms. Ensure that Key exchange algorithms used are in compliance with site policy.
                            The only Key Exchange Algorithms currently FIPS 140-2 approved are: ecdh-sha2- nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange- sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman- group14-sha256
                            The Key Exchange algorithms supported by OpenSSH 7 are:
                            curve25519-sha256 curve25519-sha256@libssh.org diffie-hellman-group1-sha1 diffie-hellman-group14-sha1 diffie-hellman-group-exchange-sha1
                             diffie-hellman-group-exchange-sha256 ecdh-sha2-nistp256 ecdh-sha2-nistp384 ecdh-sha2-nistp521'

