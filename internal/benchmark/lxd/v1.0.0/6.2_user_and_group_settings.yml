---
benchmark_type: lxd
categories:
  -
    name: System Maintenance
    sub_category:
      name: 6.2 User and Group Settings
      audit_tests:
        -
          name: '6.2.1 Ensure password fields are not empty (Automated)'
          description: 'An account with an empty password field means that anybody may log in as that user without providing a password.'
          audit:
            - 'awk -F: ''($2 == "" ) { print $1 " does not have a password "}'' /etc/shadow 2> /dev/null'
          remedeation: 'If any accounts in the /etc/shadow file do not have a password, run the following command to lock the account until it can be determined why it does not have a password:
                        # passwd -l <username>
                        Also, check to see if the account is logged in and investigate what it is being used for to determine if it needs to be forced off.'
          check_type: multi_param
          eval_expr: "'$0' == '';"
        -
          name: '6.2.2 Ensure no legacy "+" entries exist in /etc/passwd (Automated)'
          description: 'The character + in various files used to be markers for systems to insert data from NIS maps at
                        a certain point in a system configuration file. These entries are no longer required on most
                        systems, but may exist in files that have been imported from other platforms.'
          audit:
            - 'grep ''^\+:'' /etc/passwd 2> /dev/null'
          remedeation: 'Remove any legacy entries from /etc/passwd if they exist.'
          check_type: multi_param
          eval_expr: "'$0' == '';"
        -
          name: '6.2.3 Ensure all users'' home directories exist (Automated)'
          description: 'The character + in various files used to be markers for systems to insert data
                        from NIS maps at a certain point in a system configuration file. These entries are no longer
                        required on most systems, but may exist in files that have been imported from other platforms.'
          audit:
            - '#!/bin/bash grep -E -v ''^(halt|sync|shutdown)'' /etc/passwd | awk -F: ''($7 != "''"$(which nologin)"''" && $7 != "/bin/false") { print $1 " " $6 }'' | while read -r user dir; do
                                                                          if [ ! -d "$dir" ]; then
                                                                          echo "The home directory ($dir) of user $user does not exist."
                                                                          fi done > tf | awk ''{ print $3 }'' tf'
          remedeation: 'If any users home directories do not exist, create them and make sure the respective user owns the directory.
                        Users without an assigned home directory should be removed or assigned a home directory as appropriate.'
          additional_info: 'The audit script checks all users with interactive shells except halt, sync, shutdown, and nfsnobody.'
          check_type: multi_param
          eval_expr: "'$0' == '';"
        -
          name: '6.2.4 Ensure no legacy "+" entries exist in /etc/shadow (Automated)'
          description: 'The character + in various files used to be markers for systems to insert data from NIS maps at a certain point in a system configuration file.
                        These entries are no longer required on most systems, but may exist in files that have been imported from other platforms.'
          audit:
            - 'grep ''^\+:'' /etc/shadow 2> /dev/null'
          remedeation: 'Remove any legacy entries from /etc/shadow if they exist.'
          check_type: multi_param
          eval_expr: "'$0' == '';"
        -
          name: '6.2.5 Ensure no legacy "+" entries exist in /etc/group (Automated)'
          description: 'The character + in various files used to be markers for systems to insert data from NIS maps at a certain point
                        in a system configuration file. These entries are no longer required on most systems, but may exist in files that
                        have been imported from other platforms.'
          audit:
            - 'grep ''^\+:'' /etc/group 2> /dev/null'
          remedeation: 'Remove any legacy entries from /etc/group if they exist.'
          check_type: multi_param
          eval_expr: "'$0' == '';"
        -
          name: '6.2.6 Ensure root is the only UID 0 account (Automated)'
          description: 'Any account with UID 0 has superuser privileges on the system.'
          audit:
            - 'awk -F: ''($3 == 0) { print $1 }'' /etc/passwd 2> /dev/null'
          remedeation: 'Remove any users other than root with UID 0 or assign them a new UID if appropriate.'
          check_type: multi_param
          eval_expr: "'$0' == 'root';"
        -
          name: '6.2.7 Ensure root PATH Integrity (Automated)'
          description: 'The root user can execute any command on the system and could be fooled into executing programs unintentionally if the PATH is not set correctly.'
          audit:
            - '#!/bin/bash
               if echo $PATH | grep -q "::" ; then
                  echo "Empty Directory in PATH (::)"
               fi
               if echo $PATH | grep -q ":$" ; then
                       echo "Trailing : in PATH"
               fi
               for x in $(echo $PATH | tr ":" " ") ; do
                 if [ -d "$x" ] ; then
                   ls -ldH "$x" | awk ''
                $9 == "." {print "PATH contains current working directory (.)"} $3 != "root" {print $9, "is not owned by root"}
                substr($1,6,1) != "-" {print $9, "is group writable"} substr($1,9,1) != "-" {print $9, "is world writable"}''
                else
                echo "$x is not a directory"
                fi done > tf | awk ''{ print $3 }'' tf'
          remedeation: 'Correct or justify any items discovered in the Audit step.'
          check_type: multi_param
          eval_expr: "'$1' == '';"
        -
          name: '6.2.8 Ensure users home directories permissions are 750 or more restrictive (Automated)'
          description: 'While the system administrator can establish secure permissions for users home directories, the users can easily override these.'
          audit:
            - '#!/bin/bash grep -E -v ''^(halt|sync|shutdown)'' /etc/passwd | awk -F: ''($7 != "''"$(which nologin)"''" && $7 != "/bin/false") { print $1 " " $6 }'' | while read user dir; do
              if [ ! -d "$dir" ]; then
              echo "The home directory ($dir) of user $user does not exist."
              else
              dirperm=$(ls -ld $dir | cut -f1 -d" ")
              if [ $(echo $dirperm | cut -c6) != "-" ]; then
              echo "Group Write permission set on the home directory ($dir) of user $user"
              fi
              if [ $(echo $dirperm | cut -c8) != "-" ]; then
              echo "Other Read permission set on the home directory ($dir) of user $user"
              fi
              if [ $(echo $dirperm | cut -c9) != "-" ]; then
              echo "Other Write permission set on the home directory ($dir) of user $user"
              fi
              if [ $(echo $dirperm | cut -c10) != "-" ]; then
              echo "Other Execute permission set on the home directory ($dir) of user $user"
              fi fi
              done > tf | awk ''{ print $3 }'' tf'
          remedeation: 'Making global modifications to user home directories without alerting the user community
                        can result in unexpected outages and unhappy users. Therefore, it is recommended that a monitoring
                        policy be established to report user file permissions and determine the action to be taken in accordance with site policy.'
          check_type: multi_param
          eval_expr: "'$1' == '';"
          additional_info: 'On some distributions the /sbin/nologin should be replaced with /usr/sbin/nologin.'
        -
          name: '6.2.9 Ensure users own their home directories (Automated)'
          description: 'The user home directory is space defined for the particular user to set local environment variables and to store personal files.'
          audit:
            - '#!/bin/bash grep -E -v ''^(halt|sync|shutdown)'' /etc/passwd | awk -F: ''($7 != "''"$(which nologin)"''" && $7 != "/bin/false") { print $1 " " $6 }'' | while read user dir; do
              if [ ! -d "$dir" ]; then
              echo "The home directory ($dir) of user $user does not exist."
              else
              owner=$(stat -L -c "%U" "$dir")
              if [ "$owner" != "$user" ]; then
              echo "The home directory ($dir) of user $user is owned by $owner." fi
              fi done > tf | awk ''{ print $3 }'' tf'
          remedeation: 'Change the ownership of any home directories that are not owned by the defined user to the correct user.'
          check_type: multi_param
          eval_expr: "'$1' == '';"
          additional_info: 'On some distributions the /sbin/nologin should be replaced with /usr/sbin/nologin.'
        -
          name: '6.2.10 Ensure users dot files are not group or world writable (Automated)'
          description: 'While the system administrator can establish secure permissions for users "dot" files, the users can easily override these.'
          audit:
            - '#!/bin/bash grep -E -v ''^(halt|sync|shutdown)'' /etc/passwd | awk -F: ''($7 != "''"$(which nologin)"''" && $7 != "/bin/false") { print $1 " " $6 }'' | while read user dir; do
                if [ ! -d "$dir" ]; then
                echo "The home directory ($dir) of user $user does not exist."
                else
                for file in $dir/.[A-Za-z0-9]*; do
                if [ ! -h "$file" -a -f "$file" ]; then
                fileperm=$(ls -ld $file | cut -f1 -d" ")
                if [ $(echo $fileperm | cut -c6) != "-" ]; then echo "Group Write permission set on file $file"
                fi
                if [ $(echo $fileperm | cut -c9)  != "-" ]; then
                echo "Other Write permission set on file $file" fi
                fi
                done fi
                done > tf | awk ''{ print $3 }'' tf'
          remedeation: 'Making global modifications to users files without alerting the user community can result in unexpected outages and unhappy users.
                        Therefore, it is recommended that a monitoring policy be established to report user dot
                         file permissions and determine the action to be taken in accordance with site policy.'
          check_type: multi_param
          eval_expr: "'$1' == '';"
          additional_info: 'On some distributions the /sbin/nologin should be replaced with /usr/sbin/nologin.'
        -
          name: '6.2.11 Ensure no users have .forward files (Automated)'
          description: 'The .forward file specifies an email address to forward the users mail to.'
          audit:
            - '#!/bin/bash grep -E -v ''^(root|halt|sync|shutdown)'' /etc/passwd | awk -F: ''($7 != "''"$(which nologin)"''" && $7 != "/bin/false") { print $1 " " $6 }'' | while read user dir; do
               if [ ! -d "$dir" ]; then
               echo "The home directory ($dir) of user $user does not exist."
               else
               if [ ! -h "$dir/.forward" -a -f "$dir/.forward" ]; then
               echo ".forward file $dir/.forward exists" fi
               fi done > tf | awk ''{ print $3 }'' tf'
          remedeation: 'Making global modifications to users
                        files without alerting the user community can result in unexpected outages and unhappy users.
                        Therefore, it is recommended that a monitoring policy be established to report user.
                        forward files and determine the action to be taken in accordance with site policy.'
          check_type: multi_param
          eval_expr: "'$1' == '';"
          additional_info: 'On some distributions the /sbin/nologin should be replaced with /usr/sbin/nologin.'
        -
          name: '6.2.12 Ensure no users have .netrc files (Automated)'
          description: 'The .netrc file contains data for logging into a remote host for file transfers via FTP.'
          audit:
            - '#!/bin/bash
               grep -E -v ''^(root|halt|sync|shutdown)'' /etc/passwd | awk -F: ''($7 != "''"$(which nologin)"''" && $7 != "/bin/false") { print $1 " " $6 }'' | while read user dir; do
               if [ ! -d "$dir" ]; then
               echo "The home directory ($dir) of user $user does not exist."
               else
               if [ ! -h "$dir/.netrc" -a -f "$dir/.netrc" ]; then
               echo ".netrc file $dir/.netrc exists"
               fi
               fi done > tf | awk ''{ print $3 }'' tf'
          remedeation: 'Making global modifications to users files without alerting the user community can result
                        in unexpected outages and unhappy users. Therefore, it is recommended that a monitoring policy
                         be established to report user .netrc files and determine the action to be taken in accordance with site policy.'
          check_type: multi_param
          eval_expr: "'$1' == '';"
          additional_info: 'On some distributions the /sbin/nologin should be replaced with /usr/sbin/nologin.'
