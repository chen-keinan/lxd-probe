---
benchmark_type: lxd
categories:
  -
    name: System Maintenance
    sub_category:
      name: 6.2 User and Group Settings
      audit_tests:
        -
          name: '6.2.1 Ensure password fields are not empty (Automated)'
          description: 'An account with an empty password field means that anybody may log in as that user without providing a password.'
          audit:
            - 'awk -F: ''($2 == "" ) { print $1 " does not have a password "}'' /etc/shadow 2> /dev/null'
          remedeation: 'If any accounts in the /etc/shadow file do not have a password, run the following command to lock the account until it can be determined why it does not have a password:
                        # passwd -l <username>
                        Also, check to see if the account is logged in and investigate what it is being used for to determine if it needs to be forced off.'
          check_type: multi_param
          eval_expr: "'$0' == '';"
        -
          name: '6.2.2 Ensure no legacy "+" entries exist in /etc/passwd (Automated)'
          description: 'The character + in various files used to be markers for systems to insert data from NIS maps at
                        a certain point in a system configuration file. These entries are no longer required on most
                        systems, but may exist in files that have been imported from other platforms.'
          audit:
            - 'grep ''^\+:'' /etc/passwd 2> /dev/null'
          remedeation: 'Remove any legacy entries from /etc/passwd if they exist.'
          check_type: multi_param
          eval_expr: "'$0' == '';"
        -
          name: '6.2.3 Ensure all users'' home directories exist (Automated)'
          description: 'The character + in various files used to be markers for systems to insert data
                        from NIS maps at a certain point in a system configuration file. These entries are no longer
                        required on most systems, but may exist in files that have been imported from other platforms.'
          audit:
            - '#!/bin/bash grep -E -v ''^(halt|sync|shutdown)'' /etc/passwd | awk -F: ''($7 != "''"$(which nologin)"''" && $7 != "/bin/false") { print $1 " " $6 }'' | while read -r user dir; do
                                                                          if [ ! -d "$dir" ]; then
                                                                          echo "The home directory ($dir) of user $user does not exist."
                                                                          fi done > tf | awk ''{ print $3 }'' tf'
          remedeation: 'If any users home directories do not exist, create them and make sure the respective user owns the directory.
                        Users without an assigned home directory should be removed or assigned a home directory as appropriate.'
          additional_info: 'The audit script checks all users with interactive shells except halt, sync, shutdown, and nfsnobody.'
          check_type: multi_param
          eval_expr: "'$0' == '';"
        -
          name: '6.2.4 Ensure no legacy "+" entries exist in /etc/shadow (Automated)'
          description: 'The character + in various files used to be markers for systems to insert data from NIS maps at a certain point in a system configuration file.
                        These entries are no longer required on most systems, but may exist in files that have been imported from other platforms.'
          audit:
            - 'grep ''^\+:'' /etc/shadow 2> /dev/null'
          remedeation: 'Remove any legacy entries from /etc/shadow if they exist.'
          check_type: multi_param
          eval_expr: "'$0' == '';"
        -
          name: '6.2.5 Ensure no legacy "+" entries exist in /etc/group (Automated)'
          description: 'The character + in various files used to be markers for systems to insert data from NIS maps at a certain point
                        in a system configuration file. These entries are no longer required on most systems, but may exist in files that
                        have been imported from other platforms.'
          audit:
            - 'grep ''^\+:'' /etc/group 2> /dev/null'
          remedeation: 'Remove any legacy entries from /etc/group if they exist.'
          check_type: multi_param
          eval_expr: "'$0' == '';"
        -
          name: '6.2.6 Ensure root is the only UID 0 account (Automated)'
          description: 'Any account with UID 0 has superuser privileges on the system.'
          audit:
            - 'awk -F: ''($3 == 0) { print $1 }'' /etc/passwd 2> /dev/null'
          remedeation: 'Remove any users other than root with UID 0 or assign them a new UID if appropriate.'
          check_type: multi_param
          eval_expr: "'$0' == 'root';"
        -
          name: '6.2.7 Ensure root PATH Integrity (Automated)'
          description: 'The root user can execute any command on the system and could be fooled into executing programs unintentionally if the PATH is not set correctly.'
          audit:
            - '#!/bin/bash
               if echo $PATH | grep -q "::" ; then
                  echo "Empty Directory in PATH (::)"
               fi
               if echo $PATH | grep -q ":$" ; then
                       echo "Trailing : in PATH"
               fi
               for x in $(echo $PATH | tr ":" " ") ; do
                 if [ -d "$x" ] ; then
                   ls -ldH "$x" | awk ''
                $9 == "." {print "PATH contains current working directory (.)"} $3 != "root" {print $9, "is not owned by root"}
                substr($1,6,1) != "-" {print $9, "is group writable"} substr($1,9,1) != "-" {print $9, "is world writable"}''
                else
                echo "$x is not a directory"
                fi done > tf | awk ''{ print $3 }'' tf'
          remedeation: 'Correct or justify any items discovered in the Audit step.'
          check_type: multi_param
          eval_expr: "'$0' == '';"
        -
          name: '6.2.8 Ensure users home directories permissions are 750 or more restrictive (Automated)'
          description: 'While the system administrator can establish secure permissions for users home directories, the users can easily override these.'
          audit:
            - '#!/bin/bash grep -E -v ''^(halt|sync|shutdown)'' /etc/passwd | awk -F: ''($7 != "''"$(which nologin)"''" && $7 != "/bin/false") { print $1 " " $6 }'' | while read user dir; do
              if [ ! -d "$dir" ]; then
              echo "The home directory ($dir) of user $user does not exist."
              else
              dirperm=$(ls -ld $dir | cut -f1 -d" ")
              if [ $(echo $dirperm | cut -c6) != "-" ]; then
              echo "Group Write permission set on the home directory ($dir) of user $user"
              fi
              if [ $(echo $dirperm | cut -c8) != "-" ]; then
              echo "Other Read permission set on the home directory ($dir) of user $user"
              fi
              if [ $(echo $dirperm | cut -c9) != "-" ]; then
              echo "Other Write permission set on the home directory ($dir) of user $user"
              fi
              if [ $(echo $dirperm | cut -c10) != "-" ]; then
              echo "Other Execute permission set on the home directory ($dir) of user $user"
              fi fi
              done > tf | awk ''{ print $3 }'' tf'
          remedeation: 'Making global modifications to user home directories without alerting the user community
                        can result in unexpected outages and unhappy users. Therefore, it is recommended that a monitoring
                        policy be established to report user file permissions and determine the action to be taken in accordance with site policy.'
          check_type: multi_param
          eval_expr: "'$0' == '';"
          additional_info: 'On some distributions the /sbin/nologin should be replaced with /usr/sbin/nologin.'
        -
          name: '6.2.9 Ensure users own their home directories (Automated)'
          description: 'The user home directory is space defined for the particular user to set local environment variables and to store personal files.'
          audit:
            - '#!/bin/bash grep -E -v ''^(halt|sync|shutdown)'' /etc/passwd | awk -F: ''($7 != "''"$(which nologin)"''" && $7 != "/bin/false") { print $1 " " $6 }'' | while read user dir; do
              if [ ! -d "$dir" ]; then
              echo "The home directory ($dir) of user $user does not exist."
              else
              owner=$(stat -L -c "%U" "$dir")
              if [ "$owner" != "$user" ]; then
              echo "The home directory ($dir) of user $user is owned by $owner." fi
              fi done > tf | awk ''{ print $3 }'' tf'
          remedeation: 'Change the ownership of any home directories that are not owned by the defined user to the correct user.'
          check_type: multi_param
          eval_expr: "'$0' == '';"
          additional_info: 'On some distributions the /sbin/nologin should be replaced with /usr/sbin/nologin.'
        -
          name: '6.2.10 Ensure users dot files are not group or world writable (Automated)'
          description: 'While the system administrator can establish secure permissions for users "dot" files, the users can easily override these.'
          audit:
            - '#!/bin/bash grep -E -v ''^(halt|sync|shutdown)'' /etc/passwd | awk -F: ''($7 != "''"$(which nologin)"''" && $7 != "/bin/false") { print $1 " " $6 }'' | while read user dir; do
                if [ ! -d "$dir" ]; then
                echo "The home directory ($dir) of user $user does not exist."
                else
                for file in $dir/.[A-Za-z0-9]*; do
                if [ ! -h "$file" -a -f "$file" ]; then
                fileperm=$(ls -ld $file | cut -f1 -d" ")
                if [ $(echo $fileperm | cut -c6) != "-" ]; then echo "Group Write permission set on file $file"
                fi
                if [ $(echo $fileperm | cut -c9)  != "-" ]; then
                echo "Other Write permission set on file $file" fi
                fi
                done fi
                done > tf | awk ''{ print $3 }'' tf'
          remedeation: 'Making global modifications to users files without alerting the user community can result in unexpected outages and unhappy users.
                        Therefore, it is recommended that a monitoring policy be established to report user dot
                         file permissions and determine the action to be taken in accordance with site policy.'
          check_type: multi_param
          eval_expr: "'$0' == '';"
          additional_info: 'On some distributions the /sbin/nologin should be replaced with /usr/sbin/nologin.'
        -
          name: '6.2.11 Ensure no users have .forward files (Automated)'
          description: 'The .forward file specifies an email address to forward the users mail to.'
          audit:
            - '#!/bin/bash grep -E -v ''^(root|halt|sync|shutdown)'' /etc/passwd | awk -F: ''($7 != "''"$(which nologin)"''" && $7 != "/bin/false") { print $1 " " $6 }'' | while read user dir; do
               if [ ! -d "$dir" ]; then
               echo "The home directory ($dir) of user $user does not exist."
               else
               if [ ! -h "$dir/.forward" -a -f "$dir/.forward" ]; then
               echo ".forward file $dir/.forward exists" fi
               fi done > tf | awk ''{ print $3 }'' tf'
          remedeation: 'Making global modifications to users
                        files without alerting the user community can result in unexpected outages and unhappy users.
                        Therefore, it is recommended that a monitoring policy be established to report user.
                        forward files and determine the action to be taken in accordance with site policy.'
          check_type: multi_param
          eval_expr: "'$0' == '';"
          additional_info: 'On some distributions the /sbin/nologin should be replaced with /usr/sbin/nologin.'
        -
          name: '6.2.12 Ensure no users have .netrc files (Automated)'
          description: 'The .netrc file contains data for logging into a remote host for file transfers via FTP.'
          audit:
            - '#!/bin/bash
               grep -E -v ''^(root|halt|sync|shutdown)'' /etc/passwd | awk -F: ''($7 != "''"$(which nologin)"''" && $7 != "/bin/false") { print $1 " " $6 }'' | while read user dir; do
               if [ ! -d "$dir" ]; then
               echo "The home directory ($dir) of user $user does not exist."
               else
               if [ ! -h "$dir/.netrc" -a -f "$dir/.netrc" ]; then
               echo ".netrc file $dir/.netrc exists"
               fi
               fi done > tf | awk ''{ print $3 }'' tf'
          remedeation: 'Making global modifications to users files without alerting the user community can result
                        in unexpected outages and unhappy users. Therefore, it is recommended that a monitoring policy
                         be established to report user .netrc files and determine the action to be taken in accordance with site policy.'
          check_type: multi_param
          eval_expr: "'$0' == '';"
          additional_info: 'On some distributions the /sbin/nologin should be replaced with /usr/sbin/nologin.'
        -
          name: '6.2.13 Ensure users .netrc Files are not group or world accessible (Automated)'
          description: 'While the system administrator can establish secure permissions for users .netrc files, the users can easily override these.'
          audit:
            - '#!/bin/bash
               grep -E -v ''^(root|halt|sync|shutdown)'' /etc/passwd | awk -F: ''($7 != "''"$(which nologin)"''" && $7 != "/bin/false") { print $1 " " $6 }'' | while read user dir; do
               if [ ! -d "$dir" ]; then
               echo "The home directory ($dir) of user $user does not exist."
               else
               for file in $dir/.netrc; do
               if [ ! -h "$file" -a -f "$file" ]; then
               fileperm=$(ls -ld $file | cut -f1 -d" ")
               if [ $(echo $fileperm | cut -c5)  != "-" ]; then
               echo "Group Read set on $file"
               fi
               if [ $(echo $fileperm | cut -c6)  != "-" ]; then
               echo "Group Write set on $file"
               fi
               if [ $(echo $fileperm | cut -c7)  != "-" ]; then
               echo "Group Execute set on $file"
               fi
               if [ $(echo $fileperm | cut -c8)  != "-" ]; then
               echo "Other Read set on $file"
               fi
               if [ $(echo $fileperm | cut -c9)  != "-" ]; then
               echo "Other Write set on $file"
               fi
               if [ $(echo $fileperm | cut -c10)  != "-" ]; then
               echo "Other Execute set on $file"
               fi
               fi done
               fi done 2> /dev/null > tf | awk ''{ print $3 }'' tf'
          remedeation: 'Making global modifications to users files without alerting the user community can result in unexpected outages
                        and unhappy users. Therefore, it is recommended that a monitoring policy be established to report user
                        .netrc file permissions and determine the action to be taken in accordance with site policy'
          check_type: multi_param
          eval_expr: "'$0' == '';"
          additional_info: 'While the complete removal of .netrc files is recommended if any are required on the system secure permissions must be applied.'
        -
          name: '6.2.14 Ensure no users have .rhosts files (Automated)'
          description: 'While no .rhosts files are shipped by default, users can easily create them.'
          audit:
            - '#!/bin/bash grep -E -v ''^(root|halt|sync|shutdown)'' /etc/passwd | awk -F: ''($7 != "''"$(which nologin)"''" && $7 != "/bin/false") { print $1 " " $6 }'' | while read user dir; do
               if [ ! -d "$dir" ]; then
               echo "The home directory ($dir) of user $user does not exist."
               else
               for file in $dir/.rhosts; do
               if [ ! -h "$file" -a -f "$file" ]; then
               echo ".rhosts file in $dir"
               fi done
               fi done > tf | awk ''{ print $3 }'' tf'
          remedeation: 'Making global modifications to users files without alerting the user community can result in unexpected outages and unhappy users. Therefore, it is recommended that a monitoring policy be established to report user .rhosts files and determine the action to be taken in accordance with site policy.'
          check_type: multi_param
          eval_expr: "'$0' == '';"
          additional_info: 'On some distributions the /sbin/nologin should be replaced with /usr/sbin/nologin.'
        -
          name: '6.2.15 Ensure all groups in /etc/passwd exist in /etc/group (Automated)'
          description: 'Over time, system administration errors and changes can lead to groups being defined in /etc/passwd but not in /etc/group'
          audit:
            - '#!/bin/bash for i in $(cut -s -d: -f4 /etc/passwd | sort -u ); do grep -q -P "^.*?:[^:]*:$i:" /etc/group
               if [ $? -ne 0 ]; then
               echo "Group $i is referenced by /etc/passwd but does not exist in /etc/group"
               fi done > tf | awk ''{ print $3 }'' tf'
          remedeation: 'Analyze the output of the Audit step above and perform the appropriate action to correct any discrepancies found.'
          check_type: multi_param
          eval_expr: "'$0' == '';"
          additional_info: 'On some distributions the /sbin/nologin should be replaced with /usr/sbin/nologin.'
        -
          name: '6.2.16 Ensure no duplicate UIDs exist (Automated)'
          description: 'Although the useradd program will not let you create a duplicate User ID (UID),
                        it is possible for an administrator to manually edit the /etc/passwd file and change the UID field.'
          audit:
            - '#!/bin/bash cut -f3 -d":" /etc/passwd | sort -n | uniq -c | while read x ; do [ -z "$x" ] && break
               set - $x
               if [ $1 -gt 1 ]; then
               users=$(awk -F: ''($3 == n) { print $1 }'' n=$2 /etc/passwd | xargs)
                echo "Duplicate UID ($2): $users"
                fi
                done > tf | awk ''{ print $3 }'' tf'
          remedeation: 'Based on the results of the audit script, establish unique UIDs and review all files owned by the shared UIDs to determine which UID they are supposed to belong to.'
          check_type: multi_param
          eval_expr: "'$0' == '';"
        -
          name: '6.2.17 Ensure no duplicate GIDs exist (Automated)'
          description: 'Although the groupadd program will not let you create a duplicate Group ID (GID), it is possible for an administrator to manually edit the /etc/group file and change the GID field.'
          audit:
            - '#!/bin/bash cut -d: -f3 /etc/group | sort | uniq -d | while read x ; do echo "Duplicate GID ($x) in /etc/group"
               done > tf | awk ''{ print $2 }'' tf'
          remedeation: 'Based on the results of the audit script, establish unique GIDs and review all files owned by the shared GID to determine which group they are supposed to belong to.'
          check_type: multi_param
          eval_expr: "'$0' == '';"
          additional_info: 'You can also use the grpck command to check for other inconsistencies in the /etc/group file.'
        -
          name: '6.2.18 Ensure no duplicate user names exist (Automated)'
          description: 'Although the useradd program will not let you create a duplicate user name, it is possible for an administrator to manually edit the /etc/passwd file and change the user name.'
          audit:
            - '#!/bin/bash cut -d: -f1 /etc/passwd | sort | uniq -d | while read x do echo "Duplicate login name ${x} in /etc/passwd"
               done > tf | awk ''{ print $2 }'' tf'
          remedeation: 'Based on the results of the audit script, establish unique user names for the users. File ownerships will automatically reflect the change as long as the users have unique UIDs.'
          check_type: multi_param
          eval_expr: "'$0' == '';"
        -
          name: '6.2.19 Ensure no duplicate group names exist (Automated)'
          description: 'Although the groupadd program will not let you create a duplicate group name, it is possible for an administrator to manually edit the /etc/group file and change the group name.'
          audit:
            - '#!/bin/bash cut -d: -f1 /etc/group | sort | uniq -d | while read x do echo "Duplicate group name ${x} in /etc/group"
               done > tf | awk ''{ print $2 }'' tf'
          remedeation: 'Based on the results of the audit script, establish unique names for the user groups. File group ownerships will automatically reflect the change as long as the groups have unique GIDs.'
          check_type: multi_param
          eval_expr: "'$0' == '';"
        -
          name: '6.2.20 Ensure shadow group is empty (Automated)'
          description: 'The shadow group allows system programs which require access the ability to read the /etc/shadow file. No users should be assigned to the shadow group.'
          audit:
            - 'grep ^shadow:[^:]*:[^:]*:[^:]+ /etc/group'
            - 'awk -F: ''($4 == "<shadow-gid>") { print }'' /etc/passwd'
          remedeation: 'Remove all users from the shadow group, and change the primary group of any users with shadow as their primary group.'
          check_type: multi_param
          eval_expr: "'$0' == ''; && '$1' == '';"